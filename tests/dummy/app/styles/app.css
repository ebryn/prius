:root {
  --main-color: rgb(255, 0, 0);
}

.basic-styling .item {
  background-color: rgb(0, 0, 0);
  color: var(--main-color);
}

.default-value .item {
  background-color: rgb(0, 0, 0);
  color: var(--secondary-color, rgb(0, 255, 0));
}

.complex-shadowing .one {
  --complex-shadowing-foo: 40px;
}
.complex-shadowing .two {
  --complex-shadowing-bar: var(--complex-shadowing-foo);
}
.complex-shadowing .three {
  --complex-shadowing-foo: calc(var(--complex-shadowing-bar) + 5px);
}
.complex-shadowing .foo {
  font-size: var(--complex-shadowing-foo);
}
.complex-shadowing .bar {
  font-size: var(--complex-shadowing-bar);
}

.rule-merging {
  --rule-merging-foo: rgb(255, 0, 0);
}
.rule-merging {
  --rule-merging-bar: rgb(0, 255, 0);
}
.rule-merging .item {
  background-color: var(--rule-merging-foo);
  color: var(--rule-merging-bar);
}

.class-attribute-mutation-updates-children .foo {
  --class-attribute-mutation-updates-children-color: rgb(255, 0, 0);
}
.class-attribute-mutation-updates-children .bar {
  --class-attribute-mutation-updates-children-color: rgb(0, 255, 0);
}
.class-attribute-mutation-updates-children .item {
  color: var(--class-attribute-mutation-updates-children-color);
}

.class-attribute-replaced {
  --class-attribute-replaced-foo: rgb(255, 0, 0);
  --class-attribute-replaced-bar: rgb(0, 255, 0);
}
.class-attribute-replaced .foo {
  color: var(--class-attribute-replaced-foo);
  background-color: rgb(0, 0, 0);
}
.class-attribute-replaced .bar {
  background-color: var(--class-attribute-replaced-bar);
}

.removing-an-element-clears-its-rule {
  --removing-an-element-clears-its-rule-size: 40px;
}
.removing-an-element-clears-its-rule .foo {
  font-size: var(--removing-an-element-clears-its-rule-size);
}